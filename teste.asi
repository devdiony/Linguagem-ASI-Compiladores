//Disciplina: Compiladores.
//Professor: Maurício Rodrigues Lima.
//Linguagem: Python.
//Nome da Linguagem Desenvolvida: ASI.
//Alunos: Carlos Eduardo,
//        Diony Tarso Ferreira Filho,
//        Gabriel Jonas Lucio,
//        Manel,
//        Sergio Filho.
// Arquivo: teste.asi
// Demonstração completa das funcionalidades da linguagem ASI
// teste.asi

// --- Declaração de Variáveis Primitivas ---
contador.inteiro = 0;
saldo.decimal = 150.75;
pi_preciso.duplo = 3.1415926535;
letra.caractere = 'A';
ativo.booleano = verdadeiro;
mensagem.texto = "Ola ASI!"; // Nota: 'texto' atualmente só suporta literais

// --- Declaração de Vetor e Matriz ---
notas.decimal[5];          // Vetor de 5 decimais
tabuleiro.caractere[3][3]; // Matriz 3x3 de caracteres

// --- Operações e Atribuições ---
notas[0] = 9.5;
notas[1] = 7.0;
tabuleiro[0][0] = 'X';
tabuleiro[1][1] = 'O';

calculo.inteiro = 10 + (2 * 5); // Precedência de operadores
resultado_bool.inteiro = ativo + 5; // Operação com booleano (verdadeiro -> 1) -> resultado_bool será 6

// --- Estrutura Condicional (se/eSe) ---
se (saldo > 100.0) {
    escreva("Saldo maior que 100.");
} eSe {
    escreva("Saldo baixo.");
}

se (ativo == falso) {
    escreva("Sistema inativo."); // Não deve executar
}

// --- Laço de Repetição (ateQue / while) ---
escreva("Contagem (while):");
ateQue (contador < 3) {
    escreva(" ", contador);
    contador = contador + 1;
}
escreva("\n"); // Adiciona quebra de linha

// --- Laço de Repetição (ate / for) ---
escreva("Iteracao (for):");
ate (i.inteiro = 0; i < 2; i = i + 1) {
    escreva(" ", i);
    notas[i+2] = 8.0; // Acessando vetor dentro do loop
}
escreva("\n");

// --- Demonstração de String e Buffer Overflow ---
buffer_pequeno.caractere[10];
copiar_texto(buffer_pequeno, "1234567890"); // >> ALERTA: Buffer Overflow! <<
// A string "1234567890" precisa de 11 bytes (10 + '\0'), mas o buffer só tem 10.

escreva("Conteudo (potencialmente corrompido) do buffer: ", buffer_pequeno);
escreva("\nFim do programa ASI.\n");

